idx.nov <- sapply(newpros[[kk]][!ol], FUN=function(s){grep(s, res[[kk]][,1])})
dat.ol <- data.frame(NAME=res[[kk]][idx.ol,1], Description=NA, res[[kk]][idx.ol,2:10])
dat.nov <- data.frame(NAME=res[[kk]][idx.nov,1], Description=NA, res[[kk]][idx.nov,2:10])
colnames(dat.ol)[3:11] <- c("SpikedHD_2perYD.1", "SpikedHD_2perYD.2", "SpikedHD_2perYD.3",
"SpikedHD_5perYD.1", "SpikedHD_5perYD.2", "SpikedHD_5perYD.3",
"SpikedHD_10perYD.1","SpikedHD_10perYD.2","SpikedHD_10perYD.3")
colnames(dat.nov)[3:11] <- c("SpikedHD_2perYD.1", "SpikedHD_2perYD.2", "SpikedHD_2perYD.3",
"SpikedHD_5perYD.1", "SpikedHD_5perYD.2", "SpikedHD_5perYD.3",
"SpikedHD_10perYD.1","SpikedHD_10perYD.2","SpikedHD_10perYD.3")
outfile.ol <- paste("TPConsist", names(tps[kk]), "overlap res.gct")
outfile.nov <- paste("TPConsist", names(tps[kk]), "novel res.gct")
write.table(dat.ol, outfile.ol,sep="\t",row.names=F,quote=F) # need to add two extra .gct lines at the top
write.table(dat.nov, outfile.nov,sep="\t",row.names=F,quote=F) # need to add two extra .gct lines a
kk=4
ol <- as.vector(newpros[[kk]]) %in% as.vector(newpros[[1]] )
idx.ol <- sapply(newpros[[kk]][ol], FUN=function(s){grep(s, res[[kk]][,1])})
idx.nov <- sapply(newpros[[kk]][!ol], FUN=function(s){grep(s, res[[kk]][,1])})
idx.ol
ol
newpros[[kk]][ol]
rm(list=ls())
basepath <- "W:/Internal/i_90018_APAF_MS_20140818/Manuscript"
codepath <- paste(basepath, "Code", sep="/")
source(paste(codepath, "library part function JW.R",sep="/"))
file <- paste(basepath,"Results/TP Consistency/AnovaConsist.csv", sep="/")
d <- read.csv2(file, sep=",")
tps <- list()
tps[[1]] <- d[d$ind=="Lib1", "values"]
tps[[2]] <- d[d$ind=="Lib2_3_RT", "values"]
tps[[3]] <- d[d$ind=="Lib2_4_RT", "values"]
tps[[4]] <- d[d$ind=="Lib2_5_7", "values"]
names(tps) <- c("Lib1", "Lib2_3", "Lib2_4", "Lib2_5_6")
yeast.path <- paste(codepath,"yeast",sep="/")
idfiles <- paste(yeast.path, c("SGD_CDS_xref.txt","lib7-uniprot.txt"), sep="/")
sgd <- read.table(idfiles[1], sep=" ", header=F) # V4 (YPL104W) => V3(S000006025)
uniprot <- read.delim2(idfiles[2], sep = "\t", header = T) # V1 (S000007261) => V2 (P03875)
newpros = list()
for (kk in 1:3){
newpros[[kk]] <- sapply(as.character(tps[[kk]]), parseAccession)
}
newpros[[4]] <- as.character(convertYeastID2(tps[[4]],sgd,uniprot))
library(VennDiagram)
colors <- c("gold", "lightblue", "green", "blue")
for(kk in 2:4) {
venn.diagram(newpros[c(1,kk)], filename=paste("Lib1 and ", names(tps)[kk], "TP Venn.png"),
2000, 2000, res=300,
category=c("Lib1", names(tps)[kk]), fill=colors[c(1,kk)],
cex=2.5, cat.cex=rep(2.5,2),cat.pos=c(-20,20) )
}
library(openxlsx)
resultpath <- paste(basepath, "Results", "SWATH extraction result files",sep="/")
resfiles <- paste(resultpath,
c("5600_Lib1.xlsx", "5600_Lib2_3_RT.xlsx", "5600_Lib2_4_RT.xlsx", "5600_Lib2_5_7.xlsx"),
sep="/")
res <- list()
res <- lapply(resfiles, FUN=function(x){readWorkbook(x, sheet=3)})
k==2
kk=2
ol <- as.vector(newpros[[kk]]) %in% as.vector(newpros[[1]] )
idx.ol <- sapply(tps[[kk]][ol], FUN=function(s){grep(s, res[[kk]][,1])})
idx.nov <- sapply(tps[[kk]][!ol], FUN=function(s){grep(s, res[[kk]][,1])})
dat.ol <- data.frame(NAME=res[[kk]][idx.ol,1], Description=NA, res[[kk]][idx.ol,2:10])
dat.nov <- data.frame(NAME=res[[kk]][idx.nov,1], Description=NA, res[[kk]][idx.nov,2:10])
colnames(dat.ol)[3:11] <- c("SpikedHD_2perYD.1", "SpikedHD_2perYD.2", "SpikedHD_2perYD.3",
"SpikedHD_5perYD.1", "SpikedHD_5perYD.2", "SpikedHD_5perYD.3",
"SpikedHD_10perYD.1","SpikedHD_10perYD.2","SpikedHD_10perYD.3")
colnames(dat.nov)[3:11] <- c("SpikedHD_2perYD.1", "SpikedHD_2perYD.2", "SpikedHD_2perYD.3",
"SpikedHD_5perYD.1", "SpikedHD_5perYD.2", "SpikedHD_5perYD.3",
"SpikedHD_10perYD.1","SpikedHD_10perYD.2","SpikedHD_10perYD.3")
outfile.ol <- paste("TPConsist", names(tps[kk]), "overlap res.gct")
outfile.nov <- paste("TPConsist", names(tps[kk]), "novel res.gct")
write.table(dat.ol, outfile.ol,sep="\t",row.names=F,quote=F) # need to add two extra .gct lines at the top
write.table(dat.nov, outfile.nov,sep="\t",row.names=F,quote=F) # need to add t
tps[[kk]][ol]
kk=4
ol <- as.vector(newpros[[kk]]) %in% as.vector(newpros[[1]] )
tps[[kk]][ol]
tps[[kk]][!ol]
ol <- as.vector(newpros[[kk]]) %in% as.vector(newpros[[1]] )
idx.ol <- sapply(tps[[kk]][ol], FUN=function(s){grep(s, res[[kk]][,1])})
idx.nov <- sapply(tps[[kk]][!ol], FUN=function(s){grep(s, res[[kk]][,1])})
dat.ol <- data.frame(NAME=res[[kk]][idx.ol,1], Description=NA, res[[kk]][idx.ol,2:10])
idx.ol
ol
tps[[kk]][ol]
head(res[[kk]][,1])
parseAccession("YHR039C-A_YEAST")
proteinID <- "YHR039C-A_YEAST"
grepl("/", proteinID)
grepl("[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}",proteinID)
is.na(proteinID) | !grepl("/", proteinID) |
!grepl("[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}",proteinID)
source('C:/Applications/projects/bioinformatics_tools/SWATH/sliwrpac/R/parseAccession.R')
parseAccession("YHR039C-A_YEAST")
rm(list=ls())
basepath <- "W:/Internal/i_90018_APAF_MS_20140818/Manuscript"
codepath <- paste(basepath, "Code", sep="/")
source(paste(codepath, "library part function JW.R",sep="/"))
file <- paste(basepath,"Results/TP Consistency/AnovaConsist.csv", sep="/")
d <- read.csv2(file, sep=",")
tps <- list()
tps[[1]] <- d[d$ind=="Lib1", "values"]
tps[[2]] <- d[d$ind=="Lib2_3_RT", "values"]
tps[[3]] <- d[d$ind=="Lib2_4_RT", "values"]
tps[[4]] <- d[d$ind=="Lib2_5_7", "values"]
names(tps) <- c("Lib1", "Lib2_3", "Lib2_4", "Lib2_5_6")
yeast.path <- paste(codepath,"yeast",sep="/")
idfiles <- paste(yeast.path, c("SGD_CDS_xref.txt","lib7-uniprot.txt"), sep="/")
sgd <- read.table(idfiles[1], sep=" ", header=F) # V4 (YPL104W) => V3(S000006025)
uniprot <- read.delim2(idfiles[2], sep = "\t", header = T) # V1 (S000007261) => V2 (P03875)
for (kk in 1:4){
tps[[kk]] <- sapply(as.character(tps[[kk]]), parseAccession)
}
head(tps[[4]])
tail(tps[[4]])
tps[[1]] <- d[d$ind=="Lib1", "values"]
tps[[2]] <- d[d$ind=="Lib2_3_RT", "values"]
tps[[3]] <- d[d$ind=="Lib2_4_RT", "values"]
tps[[4]] <- d[d$ind=="Lib2_5_7", "values"]
for (kk in 1:4){
tps.parse[[kk]] <- as.vector(sapply(as.character(tps[[kk]]), parseAccession))
}
tps.parse <- list()
for (kk in 1:4){
tps.parse[[kk]] <- as.vector(sapply(as.character(tps[[kk]]), parseAccession))
}
warnings()
kk=1
tps.parse[[kk]] <- as.vector(sapply(as.character(tps[[kk]]), parseAccession))
kk=2
tps.parse[[kk]] <- as.vector(sapply(as.character(tps[[kk]]), parseAccession))
kk=3
tps.parse[[kk]] <- as.vector(sapply(as.character(tps[[kk]]), parseAccession))
kk=4
tps.parse[[kk]] <- as.vector(sapply(as.character(tps[[kk]]), parseAccession))
head(tps[[kk]])
head(tps[[3]])
parseAccession(tps[[4]][1])
tps[[4]][1]
kk
tps.parse[[kk]] <- as.vector(sapply(tps[[kk]], FUN=function(s){parseAccession(as.character(s))))
tps.parse[[kk]] <- as.vector(sapply(tps[[kk]], FUN=function(s){parseAccession(as.character(s))}))
parseAccession(tps[[kk]][50])
tps[[kk]][50]
source('C:/Applications/projects/bioinformatics_tools/SWATH/sliwrpac/R/parseAccession.R')
tps.parse[[kk]] <- as.vector(sapply(tps[[kk]], FUN=function(s){parseAccession(as.character(s))}))
for (kk in 1:4){
tps.parse[[kk]] <- as.vector(sapply(tps[[kk]], FUN=function(s){parseAccession(as.character(s))}))
}
yeast.path <- paste(codepath,"yeast",sep="/")
idfiles <- paste(yeast.path, c("SGD_CDS_xref.txt","lib7-uniprot.txt"), sep="/")
sgd <- read.table(idfiles[1], sep=" ", header=F) # V4 (YPL104W) => V3(S000006025)
uniprot <- read.delim2(idfiles[2], sep = "\t", header = T) # V1 (S000007261) => V2 (P03875)
newpros[1:3] <- tps.parse[1:3]
newpros = list()
newpros[1:3] <- tps.parse[1:3]
newpros[[4]] <- as.character(convertYeastID2(tps.parse[[4]],sgd,uniprot))
library(VennDiagram)
colors <- c("gold", "lightblue", "green", "blue")
for(kk in 2:4) {
venn.diagram(newpros[c(1,kk)], filename=paste("Lib1 and ", names(tps)[kk], "TP Venn.png"),
2000, 2000, res=300,
category=c("Lib1", names(tps)[kk]), fill=colors[c(1,kk)],
cex=2.5, cat.cex=rep(2.5,2),cat.pos=c(-20,20) )
}
head(newpros[[4]])
head(newpros[[1]])
head(tps.parse[[1]])
kk=1
tps.parse[[kk]] <- as.vector(sapply(tps[[kk]], FUN=function(s){parseAccession(as.character(s))}))
head(tps.parse[[1]])
proteinID="sp|O14455|RL36B_YEAST"
is.na(proteinID) | !grepl("/", proteinID) |
!grepl("[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}",proteinID)
is.na(proteinID) | !grepl("/", proteinID) &
!grepl("[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}",proteinID)
source('C:/Applications/projects/bioinformatics_tools/SWATH/sliwrpac/R/parseAccession.R')
for (kk in 1:4){
tps.parse[[kk]] <- as.vector(sapply(tps[[kk]], FUN=function(s){parseAccession(as.character(s))}))
}
for (kk in 1:4){
tps.parse[[kk]] <- as.vector(sapply(tps[[kk]], FUN=function(s){parseAccession(as.character(s))}))
}
yeast.path <- paste(codepath,"yeast",sep="/")
idfiles <- paste(yeast.path, c("SGD_CDS_xref.txt","lib7-uniprot.txt"), sep="/")
sgd <- read.table(idfiles[1], sep=" ", header=F) # V4 (YPL104W) => V3(S000006025)
uniprot <- read.delim2(idfiles[2], sep = "\t", header = T) # V1 (S000007261) => V2 (P03875)
newpros = list()
newpros[1:3] <- tps.parse[1:3]
newpros[[4]] <- as.character(convertYeastID2(tps.parse[[4]],sgd,uniprot))
library(VennDiagram)
colors <- c("gold", "lightblue", "green", "blue")
for(kk in 2:4) {
venn.diagram(newpros[c(1,kk)], filename=paste("Lib1 and ", names(tps)[kk], "TP Venn.png"),
2000, 2000, res=300,
category=c("Lib1", names(tps)[kk]), fill=colors[c(1,kk)],
cex=2.5, cat.cex=rep(2.5,2),cat.pos=c(-20,20) )
}
rm(list=ls())
library(sliwrpac)
basepath <- "W:/Internal/i_90018_APAF_MS_20140818/Manuscript"
codepath <- paste(basepath, "Code", sep="/")
source(paste(codepath, "library part function JW.R",sep="/"))
file <- paste(basepath,"Results/TP Consistency/AnovaConsist.csv", sep="/")
d <- read.csv2(file, sep=",")
tps <- list()
tps.parse <- list()
tps[[1]] <- d[d$ind=="Lib1", "values"]
tps[[2]] <- d[d$ind=="Lib2_3_RT", "values"]
tps[[3]] <- d[d$ind=="Lib2_4_RT", "values"]
tps[[4]] <- d[d$ind=="Lib2_5_7", "values"]
names(tps) <- c("Lib1", "Lib2_3", "Lib2_4", "Lib2_5_6")
for (kk in 1:4){
tps.parse[[kk]] <- as.vector(sapply(tps[[kk]], FUN=function(s){parseAccession(as.character(s))}))
}
parseAccession
library(roxygen2)
roxygenise("C:/Applications/projects/bioinformatics_tools/SWATH/sliwrpac/")
514-363
remove.packages("sliwrpac", lib="~/R/win-library/3.1")
install.packages("C:/Applications/projects/bioinformatics_tools/SWATH/sliwrpac_1.0.tar.gz", repos = NULL, type = "source")
library(SwathXtend)
?buildSpectraLibPair
libfiles <- paste(system.file("files",package="SwathXtend"),
c("Lib2.txt","Lib3.txt"),sep="/")
Lib2_3 <- buildSpectraLibPair(libfiles[1], libfiles[2],
outputFormat="PeakView", clean=T, nomod=T, nomc=T)
Lib2_3 <- buildSpectraLibPair(libfiles[1], libfiles[2],
outputFormat="PeakView", clean=T, nomod=T, nomc=T)
library(ggplot2)
?heatmap.2
library(gplots)
data(mtcars)
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start=0, end=.3)
cc <- rainbow(ncol(x), start=0, end=.3)
heatmap.2(x)
heatmap.2(x, dendrogram="none")
lmat <- rbind( c(5,3,4), c(2,1,4) )
lhei <- c(1.5, 4)
lwid <- c(1.5, 4, 0.75)
myplot <- function() {
oldpar <- par("mar")
par(mar=c(5.1, 4.1, 0.5, 0.5))
plot(mpg ~ hp, data=x)
}
heatmap.2(x, lmat=lmat, lhei=lhei, lwid=lwid, key=FALSE, extrafun=myplot)
heatmap.2(x,
key.title=NA, # no title
key.xlab=NA,  # no xlab
key.par=list(mgp=c(1.5, 0.5, 0),
mar=c(2.5, 2.5, 1, 0)),
key.xtickfun=function() {
breaks <- parent.frame()$breaks
return(list(
at=parent.frame()$scale01(c(breaks[1],
breaks[length(breaks)])),
labels=c(as.character(breaks[1]),
as.character(breaks[length(breaks)]))
))
})
heatmap.2(x,
breaks=256,
key.title=NA,
key.xlab=NA,
key.par=list(mgp=c(1.5, 0.5, 0),
mar=c(1, 2.5, 1, 0)),
key.xtickfun=function() {
cex <- par("cex")*par("cex.axis")
side <- 1
line <- 0
col <- par("col.axis")
font <- par("font.axis")
mtext("low", side=side, at=0, adj=0,
line=line, cex=cex, col=col, font=font)
mtext("high", side=side, at=1, adj=1,
line=line, cex=cex, col=col, font=font)
return(list(labels=FALSE, tick=FALSE))
})
data(attitude)
round(Ca <- cor(attitude), 2)
symnum(Ca) # simple graphic
# with reorder
heatmap.2(Ca,     	 symm=TRUE, margin=c(6, 6), trace="none" )
# without reorder
heatmap.2(Ca, Rowv=FALSE, symm=TRUE, margin=c(6, 6), trace="none" )
## Place the color key below the image plot
heatmap.2(x, lmat=rbind( c(0, 3), c(2,1), c(0,4) ), lhei=c(1.5, 4, 2 ) )
# fold change vs "12.50" sample
data <- pms / pms[, "12.50"]
data <- ifelse(data>1, data, -1/data)
heatmap.2(data, breaks=16, col=redgreen, tracecol="blue",
main="SpikeIn@pm Fold Changes\nrelative to 12.50 sample",
xlab="Relative Concentration", ylab="Probeset")
data(attitude)
round(Ca <- cor(attitude), 2)
symnum(Ca) # simple graphic
# with reorder
heatmap.2(Ca,     	 symm=TRUE, margin=c(6, 6), trace="none" )
# without reorder
heatmap.2(Ca, Rowv=FALSE, symm=TRUE, margin=c(6, 6), trace="none" )
## Place the color key below the image plot
heatmap.2(x, lmat=rbind( c(0, 3), c(2,1), c(0,4) ), lhei=c(1.5, 4, 2 ) )
## Place the color key to the top right of the image plot
heatmap.2(x, lmat=rbind( c(0, 3, 4), c(2,1,0 ) ), lwid=c(1.5, 4, 2 ) )
path <- "W:/Internal/i_90018_APAF_MS_20140818/Manuscript/Results/TP Consistency"
file <- paste(path, "TPConsist Lib2_3 Lib Lib2_3 Nov_res.csv", sep="/")
res <- read.csv2(file, header = T)
res <- read.csv2(file, header = T, sep=",")
x <- as.matrix(res)
624625-640262
642625-640262
heatmap.2(x)
x <- as.matrix(res[,-1])
heatmpa.2(x)
heatmap.2(x)
str(x)
str(res)
res <- read.csv2(file, header = T, sep=",", stringsAsFactors=F)
str(res)
res[,2] <- as.numeric(res[,2])
str(res)
lapply(3:11, FUN=function(x){res[,x] <- as.numeric(res[,x])})
str(res)
for(i in 3:11) {
res[,i] <- as.numeric(res[,i])
}
str(res)
x <- as.matrix(res[,-c(1,2)])
head(x)
heatmap.2(x)
rc <- rainbow(nrow(x), start=0, end=.3)
cc <- rainbow(ncol(x), start=0, end=.3)
heatmap.2(x)
heatmap.2(x, dendrogram="row")
heatmap.2(x, dendrogram="none")
tot <- apply(x, 1, sum)
head(tot)
?sweep
x <- sweep(x, 1, tot, FUN="/")
head(x)
heatmap.2(x)
heatmap.2(x, dendrogram="none")
?heatmap.2
heatmap.2(x, dendrogram="none", density.info = "none", key.title="color key")
heatmap.2(x, dendrogram="none", density.info = "none", key.title="color key", Rowv=F, Colv=F)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
my_palette <- colorRampPalette(c("green", "black", "red"))(n = 1000)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
my_palette <- colorRampPalette(c("green", "white", "red"))(n = 1000)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F,
symm=F, symkey=F, symbreaks=T, scale="none")
colors = c(seq(-3,-2,length=100),seq(-2,0.5,length=100),seq(0.5,6,length=100))
my_palette <- colorRampPalette(c("red", "black", "green"))(n = 299)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F,
symm=F, symkey=F, symbreaks=T, scale="none")
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
my_palette <- colorRampPalette(c("green", "white", "red"))(n = 1000)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
my_palette <- colorRampPalette(c("purple", "white", "red"))(n = 1000)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
my_palette <- colorRampPalette(c("blue", "white", "red"))(n = 1000)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
my_palette <- colorRampPalette(c("darkblue", "white", "red"))(n = 1000)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=T)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F, scale="row")
tot <- apply(x, 1, max)
x <- sweep(x, 1, tot, FUN="/")
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F)
heatmap.2(x, col=my_palette, dendrogram="none", density.info = "none", trace="none", Rowv=F, Colv=F, keysize=1)
path <- "W:/External/e_17915_CurtinUni_KatherineZulak_20150708/4_BioInfo"
g1 <- paste(path, "P17915_SG1andW1-1-pooled_IDA_2_SG1 and W1-1_6 frame_genome.txt",sep="/")
g2 <- paste(path, "P17915_SG1andW1-1-pooled_IDA_3_SG1 and W1-1_6 frame_genome.txt",sep="/")
library(SwathXtend)
dat.g1 <- readLibFile(g1)
dat.g2 <- readLibFile(g2)
g <- checkQuality(dat.g2, dat.g1)
g
?buildSpectraLibPair
g <- buildSpectraLibPair(dat.g1, dat.g2, clean=T, nomod=F, nomc=F)
g.noclean <- buildSpectraLibPair(dat.g1, dat.g2, clean=F, nomod=F, nomc=F)
length(unique(dat.g1$uniprot_id))
length(unique(dat.g2$uniprot_id))
length(unique(g$uniprot_id))
length(unique(g.noclean$uniprot_id))
dat.t1 <- readLibFile(t1, clean=F)
t1 <- paste(path, "P17915_SG1andW1-1-pooled_IDA_2_SG1 and W1-1_6 frame_transcripts.txt",sep="/")
t2 <- paste(path, "P17915_SG1andW1-1-pooled_IDA_3_SG1 and W1-1_6 frame_transcripts.txt",sep="/")
dat.t1 <- readLibFile(t1, clean=F)
dat.t2 <- readLibFile(t2, clean=F)
checkQuality(t2,t1)
checkQuality(dat.t2,dat.t1)
g.noclean <- buildSpectraLibPair(g1,g2, clean=F, nomod=F, nomc=F)
plotStats(dat.g2, dat.g1)
length(proteinOverlap(dat.g2, dat.g1))
length(unique(dat.g2$uniprot_id))
length(unique(dat.g1$uniprot_id))
length(intersect(dat.g2$uniprot_id, dat.g1$uniprot_id))
library(roxygen2)
roxygenise("C:/Applications/projects/bioinformatics_tools/SWATH/SwathXtend")
remove.packages("SwathXtend", lib="~/R/win-library/3.1")
install.packages("C:/Applications/projects/bioinformatics_tools/SWATH/SwathXtend_1.0.tar.gz", repos = NULL, type = "source")
r1 <- rnorm(100, mean = 2000, sd = 50)
g1 <- rnorm(100, mean = 1000, sd = 50)
layout(matrix(1:4,ncol=2))
hist(r1)
r1 <- rnorm(5000, mean = 2000, sd = 50)
g1 <- rnorm(5000, mean = 1000, sd = 50)
hist(r1)
hist(r1/g1)
r1 <- rnorm(100, mean = 200, sd = 50)
g1 <- rnorm(100, mean = 100, sd = 50)
r1 <- rnorm(5000, mean = 2000, sd = 50)
g1 <- rnorm(5000, mean = 1000, sd = 50)
r2 <- rnorm(100, mean = 200, sd = 50)
g2 <- rnorm(100, mean = 100, sd = 50)
hist(r2/g2)
hist(log(r1)/log(g1))
hist(log(r2)/log(g2))
?install.packages
ptm <- proc.time()
h<-g+1
g <- rnorm(100000)
h<-g+1
proc.time()-ptm
getwd()
rm(list=ls())
basepath <- "C:/Applications/projects/bioinformatics_tools/MRM/multiRunResultsanalysis"
inputfiles <- paste(basepath, "input", sep="/")
?entry.point
source('C:/Applications/projects/bioinformatics_tools/MRM/multiRunResultsanalysis/mrmanalysis.R')
basepath <- "C:/Applications/projects/bioinformatics_tools/MRM/multiRunResultsanalysis"
inputfiles <- paste(basepath, "input", sep="/")
library(ggplot2)
file.name=paste(inputfiles, "130221_Roche_ST01_1.csv", sep="/")
norm.level<-"Total"
df.norm.totarea<-entry.point(file.name,norm.level)
library(SwathXtend)
basepath <- "W:/Internal/i_90018_APAF_MS_20140818/Manuscript"
codepath <- paste(basepath, "Code", sep="/")
source(paste(codepath, "library part function JW.R",sep="/"))
file <- paste(basepath,"Results/TP Consistency/AnovaConsist.csv", sep="/")
d <- read.csv2(file, sep=",")
tps <- list()
tps[[1]] <- d[d$ind=="Lib1", "values"]
tps[[2]] <- d[d$ind=="Lib2_3_RT", "values"]
tps[[3]] <- d[d$ind=="Lib2_4_RT", "values"]
tps[[4]] <- d[d$ind=="Lib2_5_7", "values"]
names(tps) <- c("Lib1", "Lib2_3", "Lib2_4", "Lib2_5_6")
yeast.path <- paste(codepath,"yeast",sep="/")
idfiles <- paste(yeast.path, c("SGD_CDS_xref.txt","lib7-uniprot.txt"), sep="/")
sgd <- read.table(idfiles[1], sep=" ", header=F) # V4 (YPL104W) => V3(S000006025)
uniprot <- read.delim2(idfiles[2], sep = "\t", header = T) # V1 (S000007261) => V2 (P03875)
tps[[4]] <- convertYeastID2(tps[[4]],sgd,uniprot)
newpros = list()
for (kk in 1:3){
newpros[[kk]] <- sapply(as.character(tps[[kk]]), parseAccession)
}
newpros[[4]] <- as.character(tps[[4]])
library(VennDiagram)
colors <- c("gold", "lightblue", "green", "blue")
for(kk in 2:4) {
venn.diagram(newpros[c(1,kk)], filename=paste("Lib1 and ", names(tps)[kk], "TP Venn.png"),
2000, 2000, res=600,
category=c("Lib1", names(tps)[kk]), fill=colors[c(1,kk)],
cex=2.5, cat.cex=rep(2.5,2),cat.pos=c(-20,20) )
}
for(kk in 2:4) {
venn.diagram(newpros[c(1,kk)], filename=paste("Lib1 and ", names(tps)[kk], "TP Venn.png"),
4000, 4000, res=600,
category=c("Lib1", names(tps)[kk]), fill=colors[c(1,kk)],
cex=2.5, cat.cex=rep(2.5,2),cat.pos=c(-20,20) )
}
for(kk in 2:4) {
venn.diagram(newpros[c(1,kk)], filename=paste("Lib1 and ", names(tps)[kk], "TP Venn.tiff"),
4000, 4000, res=600,
category=c("Lib1", names(tps)[kk]), fill=colors[c(1,kk)],
cex=2.5, cat.cex=rep(2.5,2),cat.pos=c(-20,20) )
}
setwd("Y:\Projects\TMT\TMTPrePro")
setwd("Y:/Projects/TMT/TMTPrePro")
pdFile <- "inst/files/nipponbare N1comined-leave- drought_proteingroups_proteingroups.txt"
comparisonInfoFile <- "designRuns JW.xlsx"
uprat=1.2,downrat=0.83, zlim=1.5
uprat=1.2;downrat=0.83;zlim=1.5
dat = try(read.pdiscoverer(pdFile))
library(TMTPrePro)
library(openxlsx)
dat = try(read.pdiscoverer(pdFile))
comparisonInfo = try(readDesign(comparisonInfoFile) )
dat.err = try(checkLabelExistence(dat,comparisonInfo) ) ## not existing labels
comparisonInfoNew = try(updateComparisonInfo(comparisonInfo, dat.err)  )## remove non-existing labels
res.list = try(GenCompList(dat, comparisonInfoNew))
jj=1
names(res.list)[[jj]]
comp = names(res.list)[[jj]]
ratios=grep("1\\w+$",colnames(res.list[[jj]]))
ratname = paste(comparisonInfo[jj,3],comparisonInfo[jj,4],sep="/")
zscores=grep("^Zscore", colnames(res.list[[jj]]))
means=grep("^Means$", colnames(res.list[[jj]]))
ttestpval=grep("^oneSplTTest$",colnames(res.list[[jj]]))
length(means))==1 & (length(ttestpval)) ==1
(length(means))==1 & (length(ttestpval)) ==1
length(ratios)==1 & length(zscores)==1
length(ratios)==1
zscores=grep("^zscore", colnames(res.list[[jj]]))
length(ratios)==1 & length(zscores)==1
remove.packages("TMTPrePro", lib="~/R/win-library/3.1")
install.packages("Y:/Projects/TMT/TMTPrePro_1.0.zip", repos = NULL)
